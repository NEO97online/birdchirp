#!/usr/bin/env node

/**
 * <: Birdchirp :>
 * Developed by Michael Auderer, aka Hermbit
 */

const program = require('commander');

program
  .version('0.1.0')
  .command('build')

const fs = require('fs-extra');
const spinner = require('ora')({ spinner: 'dots' });
const perfy = require('perfy');

const Firestore = require('@google-cloud/firestore');
const firestore = new Firestore({
  projectId: 'birdchirp-testing',
  keyFilename: './birdchirp-testing-439c67a2e6b3.json'
});

const BirdParser = require('./birdscript-parser');
const parser = new BirdParser();

/**
 * Runs a function for each match of the regex found in the given string.
 * @param {*string} string The string to run the regex on.
 * @param {*function} callback The function to run for each result found.
 */
RegExp.prototype.forEach = function(string, callback) {
  let match = this.exec(string);
  while (match != null) {
    callback(match);
    match = this.exec(string);
  }
}

/**
 * Returns a regex that finds each Firestore reference.
 * $1: The variable name for this ref
 * $2: the path of this ref
 */
function createRefRegex() {
  return /<: *(\S*) *={1} *(\S*) *:>/g;
}

/**
 * Returns a regex that finds a variable chirp.
 * $1: The variable path inside the chirp.
 */
function createVarRegex() {
  return /<: *(\w+\.\w+) *:>/g;
}

/**
 * Returns a new regex to hunt for birds.
 * $1: The type of bird, i.e. 'doc' or 'col'
 * $2: The path of the bird, i.e. '/posts/post'
 * $3: The HTML content of the bird
 */
function createBirdRegex() {
  return /<: *(\S*) *(\S*) *:>([\s\S]*?)<\/:>/g;
}

function createForLoopRegex() {

}

/**
 * Replaces all birds with their proper data and returns the result.
 */
function parseBirds(fileString, chirpData) {
  spinner.start('Parsing file with retrieved birds...');
  return new Promise((resolve, reject) => {
    resolve(parser.parse(fileString, chirpData, true));
  }).catch(reason => spinner.fail(reason));
}

/**
 * Returns a bird ref object from a given regex match.
 * @param {*RegExpExecArray} regexMatch The result of calling .exec on the regex
 */
function getBirdRef(regexMatch) {
  const chirpRef = {
    raw:  regexMatch[0],
    name: regexMatch[1],
    path: regexMatch[2],
  }
  // return the found chirp
  return chirpRef;
}

/**
 * Loads all bird references from a string, returning a promise that
 * resolves to the data received by Firestore.
 * @param string the string to load bird references from
 */
function loadRefs(string) {
  return new Promise((resolve, reject) => {
    // Find all Firestore references
    const dataTree = {};
    let remaining = 0;
    const regex = createRefRegex();
    regex.forEach(string, match => {
      const birdRef = getBirdRef(match);
      remaining++;
      // check if this is a doc or collection
      pathLength = birdRef.path.split('/').filter(c => c.length != 0).length;
      if (pathLength % 2 == 0) {
        // Document Ref
        spinner.start(`Loading bird ref '${birdRef.name}' from document '${birdRef.path}`);
        firestore.doc(birdRef.path).get()
          .then(docSnapshot => {
            const data = docSnapshot.data();
            dataTree[birdRef.name] = data;
            remaining--;
            spinner.info(`Retrieved chirp: ${JSON.stringify(data)}`);
            if (remaining === 0) {
              spinner.succeed('Successfully retrieved all chirps!');
              resolve(dataTree);
            }
          });
      } else {
        // Collection Ref
        spinner.start(`Loading bird ref '${birdRef.name}' from collection '${birdRef.path}`);
        firestore.collection(birdRef.path).get()
          .then(colSnapshot => {
            const docs = [];
            colSnapshot.docs.forEach(doc => {
              const data = doc.data();
              docs.push(data);
              spinner.info(`Retrieved doc: ${JSON.stringify(data)}`);
            });
            dataTree[birdRef.name] = docs;
            remaining--;
            if (remaining === 0) {
              spinner.succeed('Successfully retrieved all chirps!');
              //console.log(JSON.stringify(dataTree, null, 2));
              resolve(dataTree);
            }
          })
      }
    });
  });
}

/**
 * Reads a file and returns the contents as a string.
 * @param sourceFile The file to read
 */
function readFile(sourceFile) {
  return new Promise((resolve, reject) => {
    spinner.start(`Reading file ${sourceFile}...`);
    fs.readFile(sourceFile, 'utf8', (err, fileData) => {
      if (err) {
        spinner.fail(err.message);
        reject(err);
      } else {
        spinner.succeed(`Opened file ${sourceFile}`)
        resolve(fileData);
      }
    });
  })
}

/**
 * The main chirp function of the CLI.
 * Finds birds in source files and builds to the /dist/ folder.
 */
function chirp(sourceFile, destFile) {
  perfy.start('chirp');
  
  let data = '';
  // read the source file
  readFile(sourceFile)
  // load the references from Firestore
  .then(fileData => {
    data = fileData;
    return loadRefs(data);
  })
  // replace variables with those from the retrieved data
  .then(chirpResults => parseBirds(data, chirpResults))
  // write results to file
  .then(resultString => {
    spinner.start(`Writing bird results to ${destFile}...`);
    return fs.outputFile(destFile, resultString);
  })
  // log completion time
  .then(_ => {
    const time = perfy.end('chirp').time;
    spinner.succeed(`Finished chirping in ${time}s!`)
  });
}

// Run the program
chirp('src/index.html', 'dist/index.html');